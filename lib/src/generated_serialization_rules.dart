// Copyright (c) 2012, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

/**
 * This is a template file that will be copied to the projects that use
 * transformer-based serialization and will be filled with the generated
 * serialization rules.
 */
library generated_serialization_rules;

// ====== Imports generated by the transformer will be appended below =======
// ======== Do not remove the {{GENERATED_IMPORTS_MARKER}} comment ==========

import 'package:serialization/serialization.dart' as s show Serialization;
import 'package:serialization/serialization.dart' hide Serialization;
export 'package:serialization/serialization.dart';
//{{GENERATED_IMPORTS_MARKER}}


class Serialization extends s.Serialization {

  @override
  factory Serialization({Format format}) {
    Serialization newObj = new Serialization.blank(format: format)
        ..addDefaultRules();
    automaticRules.values.forEach(
        (Function f) => newObj.addRule(f()));
    return newObj;
  }

  @override
  Serialization.blank({Format format}) : super.forRules(
      new List<SerializationRule>(), defaultFormat: format);

  // ==== Map fo Rules generated by the transformer will be appended below =====
  // ======== Do not remove the {{GENERATED_RULES_MAP_MARKER}} comment =========

  @override
  static Map<Type, Function> automaticRules = {
    //{{GENERATED_RULES_MAP_MARKER}}
  };
}

// ====== Rules generated by the transformer will be appended below =======
// ======== Do not remove the {{GENERATED_RULES_MARKER}} comment ==========

//{{GENERATED_RULES_MARKER}}
